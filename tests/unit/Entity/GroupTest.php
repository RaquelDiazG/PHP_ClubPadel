<?php

namespace AppBundle\Entity;

/**
 * Generated by PHPUnit_SkeletonGenerator
 */
class GroupTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Group
     */
    protected $group;

    /**
     * @var User
     */
    protected $user;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->group = new Group();
        $this->user = new User("user1", "user1@upm.es", "123", array("rol1"));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * Implement testConstructor
     *
     * @covers AppBundle\Entity\Group::__construct
     * @covers AppBundle\Entity\Group::getId
     * @covers AppBundle\Entity\Group::getName
     * @covers AppBundle\Entity\Group::getRoles
     */
    public function testConstructor() {
        $this->group = new Group();
        $this->assertEmpty($this->group->getId());
        $this->assertEmpty($this->group->getName());
        $this->assertEmpty($this->group->getRoles());
        $this->group = new Group("Group1", array("rol1", "rol2"));
        $this->assertEmpty($this->group->getId());
        $this->assertNotEmpty($this->group->getName());
        $this->assertNotEmpty($this->group->getRoles());
    }

    /**
     * @covers AppBundle\Entity\Group::getId
     * Implement testGetId().
     */
    public function testGetId() {
        $this->assertEmpty($this->group->getId());
    }

    /**
     * @covers AppBundle\Entity\Group::setName
     * Implement testSetName().
     */
    public function testSetName() {
        $this->assertEmpty($this->group->getName());
        $this->assertNotEmpty($this->group->setName("Group1"));
    }

    /**
     * @covers AppBundle\Entity\Group::getName
     * Implement testGetName().
     */
    public function testGetName() {
        $this->assertEquals("Group1", $this->group->getName());
    }

    /**
     * @covers AppBundle\Entity\Group::setRoles
     * Implement testSetRoles().
     */
    public function testSetRoles() {
        $this->assertEmpty($this->group->getRoles());
        $this->assertNotEmpty($this->group->setRoles(array("rol1", "rol2")));
    }

    /**
     * @covers AppBundle\Entity\Group::getRoles
     * Implement testGetRoles().
     */
    public function testGetRoles() {
        $this->assertEquals(array("rol1", "rol2"), $this->group->getRoles());
    }

    /**
     * @covers AppBundle\Entity\Group::addUser
     * Implement testAddUser().
     */
    public function testAddUser() {
        $this->assertEmpty($this->group->getUser());
        $this->assertNotEmpty($this->group->setUser($this->user));
    }

    /**
     * @covers AppBundle\Entity\Group::removeUser
     * Implement testRemoveUser().
     */
    public function testRemoveUser() {
        $this->assertNotEmpty($this->group->removeUser($this->user));
        $this->assertEmpty($this->group->getUser($this->user));
    }

    /**
     * @covers AppBundle\Entity\Group::getUser
     * Implement testGetUser().
     */
    public function testGetUser() {
        $this->assertEquals($this->user, $this->group->getUser());
    }

    /**
     * @covers AppBundle\Entity\Group::__toString
     * Implement test__toString().
     */
    public function test__toString() {
        $this->assertEquals("1-Group1", $this->group->__toString);
    }

}
