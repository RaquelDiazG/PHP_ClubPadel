<?php

namespace AppBundle\Entity;

/**
 * Generated by PHPUnit_SkeletonGenerator
 */
class UserTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var User
     */
    protected $user;

    /**
     * @var Group
     */
    protected $group;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->user = new User("user1", "user1@upm.es", "123", array("rol1"));
        $this->group = new Group("group1", array("rol1", "rol2"));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * Implement testConstructor
     *
     * @covers AppBundle\Entity\User::__construct
     * @covers AppBundle\Entity\User::getId
     * @covers AppBundle\Entity\User::getDatetime
     */
    public function testConstructor() {
        $this->assertEmpty($this->user->getId());
        $this->assertNotEmpty($this->user->getUsername());
        $this->assertNotEmpty($this->user->getEmail());
        $this->assertNotEmpty($this->user->getPassword());
        $this->assertNotEmpty($this->user->getRoles());
    }

    /**
     * @covers AppBundle\Entity\User::getId
     * Implement testGetId().
     */
    public function testGetId() {
        $this->assertEmpty($this->user->getId());
    }

    /**
     * @covers AppBundle\Entity\User::setUsername
     * Implement testSetUsername().
     */
    public function testSetUsername() {
        $this->assertNotEmpty($this->user->getUsername());
        $this->user->setUsername("user2");
        $this->assertNotEmpty($this->user->getUsername());
        $this->assertEquals("user2", $this->user->getUsername());
    }

    /**
     * @covers AppBundle\Entity\User::getUsername
     * Implement testGetUsername().
     */
    public function testGetUsername() {
        $this->assertEquals("user1", $this->user->getUsername());
    }

    /**
     * @covers AppBundle\Entity\User::setUsernameCanonical
     * Implement testSetUsernameCanonical().
     */
    public function testSetUsernameCanonical() {
        $this->assertNotEmpty($this->user->getUsernameCanonical());
        $this->user->setUsernameCanonical("user2");
        $this->assertNotEmpty($this->user->getUsernameCanonical());
        $this->assertEquals("user2", $this->user->getUsernameCanonical());
    }

    /**
     * @covers AppBundle\Entity\User::getUsernameCanonical
     * Implement testGetUsernameCanonical().
     */
    public function testGetUsernameCanonical() {
        $this->assertEquals("user1", $this->user->getUsernameCanonical());
    }

    /**
     * @covers AppBundle\Entity\User::setEmail
     * Implement testSetEmail().
     */
    public function testSetEmail() {
        $this->assertNotEmpty($this->user->getEmail());
        $this->user->setEmail("user2@upm.es");
        $this->assertNotEmpty($this->user->getEmail());
        $this->assertEquals("user2@upm.es", $this->user->getEmail());
    }

    /**
     * @covers AppBundle\Entity\User::getEmail
     * Implement testGetEmail().
     */
    public function testGetEmail() {
        $this->assertEquals("user1@upm.es", $this->user->getEmail());
    }

    /**
     * @covers AppBundle\Entity\User::setEmailCanonical
     * Implement testSetEmailCanonical().
     */
    public function testSetEmailCanonical() {
        $this->assertNotEmpty($this->user->getEmailCanonical());
        $this->user->setEmailCanonical("user2@upm.es");
        $this->assertNotEmpty($this->user->getEmailCanonical());
        $this->assertEquals("user2@upm.es", $this->user->getEmailCanonical());
    }

    /**
     * @covers AppBundle\Entity\User::getEmailCanonical
     * Implement testGetEmailCanonical().
     */
    public function testGetEmailCanonical() {
        $this->assertEquals("user1@upm.es", $this->user->getEmailCanonical());
    }

    /**
     * @covers AppBundle\Entity\User::setEnabled
     * Implement testSetEnabled().
     */
    public function testSetEnabled() {
        $this->assertTrue($this->user->getEnabled());
        $this->user->setEnabled(true);
        $this->assertTrue($this->user->getEnabled());
        $this->user->setEnabled(false);
        $this->assertFalse($this->user->getEnabled());
    }

    /**
     * @covers AppBundle\Entity\User::getEnabled
     * Implement testGetEnabled().
     */
    public function testGetEnabled() {
        $this->assertTrue($this->user->getEnabled());
    }

    /**
     * @covers AppBundle\Entity\User::setSalt
     * Implement testSetSalt().
     */
    public function testSetSalt() {
        $this->assertNotEmpty($this->user->getSalt());
        $this->user->setSalt("salt2");
        $this->assertNotEmpty($this->user->getSalt());
        $this->assertEquals("salt2", $this->user->getSalt());
    }

    /**
     * @covers AppBundle\Entity\User::getSalt
     * Implement testGetSalt().
     */
    public function testGetSalt() {
        $this->assertEquals("salt", $this->user->getSalt());
    }

    /**
     * @covers AppBundle\Entity\User::setPassword
     * Implement testSetPassword().
     */
    public function testSetPassword() {
        $this->assertNotEmpty($this->user->getPassword());
        $this->user->setPassword("123");
        $this->assertNotEmpty($this->user->getPassword());
        $this->assertEquals("123", $this->user->getPassword());
    }

    /**
     * @covers AppBundle\Entity\User::getPassword
     * Implement testGetPassword().
     */
    public function testGetPassword() {
        $this->assertEquals("123", $this->user->getPassword());
    }

    /**
     * @covers AppBundle\Entity\User::setLastLogin
     * Implement testSetLastLogin().
     */
    public function testSetLastLogin() {
        $this->assertEmpty($this->user->getLastLogin());
        $this->user->setLastLogin("15-11-2015T12-30-00");
        $this->assertNotEmpty($this->user->getLastLogin());
    }

    /**
     * @covers AppBundle\Entity\User::getLastLogin
     * Implement testGetLastLogin().
     */
    public function testGetLastLogin() {
        $this->assertNull($this->user->getLastLogin());
    }

    /**
     * @covers AppBundle\Entity\User::setLocked
     * Implement testSetLocked().
     */
    public function testSetLocked() {
        $this->assertFalse($this->user->getLocked());
        $this->user->setLocked(true);
        $this->assertTrue($this->user->getLocked());
        $this->user->setLocked(false);
        $this->assertFalse($this->user->getLocked());
    }

    /**
     * @covers AppBundle\Entity\User::getLocked
     * Implement testGetLocked().
     */
    public function testGetLocked() {
        $this->assertFalse($this->user->getLocked());
    }

    /**
     * @covers AppBundle\Entity\User::setExpired
     * Implement testSetExpired().
     */
    public function testSetExpired() {
        $this->assertFalse($this->user->getExpired());
        $this->user->setExpired(true);
        $this->assertTrue($this->user->getExpired());
    }

    /**
     * @covers AppBundle\Entity\User::getExpired
     * Implement testGetExpired().
     */
    public function testGetExpired() {
        $this->assertFalse($this->user->getExpired());
    }

    /**
     * @covers AppBundle\Entity\User::setExpiresAt
     * Implement testSetExpiresAt().
     */
    public function testSetExpiresAt() {
        $this->assertEmpty($this->user->getExpiresAt());
        $this->user->setExpiresAt("15-11-2015T12:30:00");
        $this->assertNotEmpty($this->user->getExpiresAt());
    }

    /**
     * @covers AppBundle\Entity\User::getExpiresAt
     * Implement testGetExpiresAt().
     */
    public function testGetExpiresAt() {
        $this->assertNull($this->user->getExpiresAt());
    }

    /**
     * @covers AppBundle\Entity\User::setConfirmationToken
     * Implement testSetConfirmationToken().
     */
    public function testSetConfirmationToken() {
        $this->assertEmpty($this->user->getConfirmationToken());
        $this->user->setConfirmationToken("token");
        $this->assertNotEmpty($this->user->getConfirmationToken());
    }

    /**
     * @covers AppBundle\Entity\User::getConfirmationToken
     * Implement testGetConfirmationToken().
     */
    public function testGetConfirmationToken() {
        $this->assertNull($this->user->getConfirmationToken());
    }

    /**
     * @covers AppBundle\Entity\User::setPasswordRequestedAt
     * Implement testSetPasswordRequestedAt().
     */
    public function testSetPasswordRequestedAt() {
        $this->assertEmpty($this->user->getPasswordRequestedAt());
        $this->user->setPasswordRequestedAt("15-11-2015T12:30:00");
        $this->assertNotEmpty($this->user->getPasswordRequestedAt());
    }

    /**
     * @covers AppBundle\Entity\User::getPasswordRequestedAt
     * Implement testGetPasswordRequestedAt().
     */
    public function testGetPasswordRequestedAt() {
        $this->assertNull($this->user->getPasswordRequestedAt());
    }

    /**
     * @covers AppBundle\Entity\User::setRoles
     * Implement testSetRoles().
     */
    public function testSetRoles() {
        $this->assertNotEmpty($this->user->getRoles());
        $this->assertNotEmpty($this->user->setRoles(array("rol1", "rol2")));
    }

    /**
     * @covers AppBundle\Entity\User::getRoles
     * Implement testGetRoles().
     */
    public function testGetRoles() {
        $this->assertNotEmpty($this->user->getRoles());
    }

    /**
     * @covers AppBundle\Entity\User::setCredentialsExpired
     * Implement testSetCredentialsExpired().
     */
    public function testSetCredentialsExpired() {
        $this->assertFalse($this->user->getCredentialsExpired());
        $this->user->setCredentialsExpired(true);
        $this->assertTrue($this->user->getCredentialsExpired());
    }

    /**
     * @covers AppBundle\Entity\User::getCredentialsExpired
     * Implement testGetCredentialsExpired().
     */
    public function testGetCredentialsExpired() {
        $this->assertFalse($this->user->getCredentialsExpired());
    }

    /**
     * @covers AppBundle\Entity\User::setCredentialsExpireAt
     * Implement testSetCredentialsExpireAt().
     */
    public function testSetCredentialsExpireAt() {
        $this->assertEmpty($this->user->getCredentialsExpireAt());
        $this->user->setCredentialsExpireAt("15-11-2015T12:30:00");
        $this->assertNotEmpty($this->user->getCredentialsExpireAt());
    }

    /**
     * @covers AppBundle\Entity\User::getCredentialsExpireAt
     * Implement testGetCredentialsExpireAt().
     */
    public function testGetCredentialsExpireAt() {
        $this->assertNull($this->user->getCredentialsExpireAt());
    }

    /**
     * @covers AppBundle\Entity\User::addGroup
     * Implement testAddGroup().
     */
    public function testAddGroup() {
        $this->assertEmpty($this->user->getGroup());
        $this->user->addGroup($this->group);
        $this->assertNotEmpty($this->user->getGroup());
    }

    /**
     * @covers AppBundle\Entity\User::removeGroup
     * Implement testRemoveGroup().
     */
    public function testRemoveGroup() {
        $this->assertEmpty($this->user->getGroup());
        $this->user->removeGroup($this->group);
        $this->assertEmpty($this->user->getGroup());
    }

    /**
     * @covers AppBundle\Entity\User::getGroup
     * Implement testGetGroup().
     */
    public function testGetGroup() {
        $this->assertEmpty($this->user->getGroup());
    }

    /**
     * @covers AppBundle\Entity\User::__toString
     * Implement test__toString().
     */
    public function test__toString() {
        $this->assertEquals("-user1", $this->user->__toString());
    }

}
